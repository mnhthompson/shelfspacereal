@using ShelfSpace
@* @page "/profile/{id}" once we get the profile thing worked out*@
@page "/profile"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject MediaState MediaState
@inject IJSRuntime JavaScript
@* TESTING *@
@inject ShelfSpace.Services.TestAppData testAppData

<style>
    .filterForm {
    display: flex;
    align-items: flex-end;
    gap: 1rem;
    }

    .filterItem {
    display: flex;
    flex-direction: column;
    }

    .filterItem>input,
    .submitBtn {
    height: 40px;
    }

    .tableItemCenter {
        text-align: center;
    }
</style>

<h1>user-name-here's Media Shelf</h1>

<form class="filterForm">
    <section class="filterItem">
        <label for="title">Title</label>
        <input type="text" id="title" @bind="searchTitle" placeholder="Search by Title" />
    </section>
    <section class="filterItem">
        <label for="startDate">Start Date</label>
        <input type="date" id="startDate" @bind="startDate" />
    </section>
    <section class="filterItem">
        <label for="endDate">End Date</label>
        <input type="date" id="endDate" @bind="endDate" />
    </section>
    <section class="filterItem">
        <label for="searchGenre">Genre</label>
        <input type="text" id="searchGenre" @bind="searchGenre" placeholder="Search by Genre" />
    </section>
    <select @bind="searchType" style="height: 40px; padding: 0.25rem;">
        <option value="">All Types</option>
        @foreach (var type in Enum.GetValues<MediaType>())
        {
            <option value="@type">@type</option>
        }
    </select>
    <section style="display: flex; gap: 0.5rem;">
        <button class="submitBtn" type="button" @onclick="FilterMedia">Filter</button>
        @if (!clearFilterHidden)
        {
            <button class="submitBtn" type="button" @onclick="ResetFilter">Clear Filter</button>
        }
    </section>
</form>

<button style="margin: 1rem 0rem;" @onclick="GoToAddItemPage">Create New Item</button>

<table class="table">
    <thead>
        <tr>
            <th class="tableItemCenter">Title</th>
            <th class="tableItemCenter">Type</th>
            <th class="tableItemCenter">Genre</th>
            <th class="tableItemCenter">Release Year</th>
        </tr>
    </thead>
    <tbody>
        @if (testAppData.mediaItems.Count > 0)
        {
            @foreach (var item in filteredMediaItems)
            {
                <tr>
                    <ItemInfo media="item" />
                    <td style="display: flex; gap: 0.25rem;">
                        <a href='/profile/Edit/@item.SpecialId'>Edit</a> |
                        <a href='/profile/Detail/@item.SpecialId'>Detail</a> |
                        @* <p style="color: rgba(var(--bs-link-color-rgb), var(--bs-link-opacity, 1)); text-decoration: underline;" @onclick="() => ShowDeleteModal(item)">Delete</p> *@
                        <a href='/profile/Delete/@item.SpecialId'>Delete</a>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4" style="text-align: center;">No Media</td>
                <button @onclick="TESTReplaceData">Replace Data</button>
            </tr>
        }
    </tbody>
</table>


@code {
    @* private List<MediaItem> mediaItems = new(); *@
    private List<MediaItem>? filteredMediaItems;
    // Filter Params
    private string? searchTitle;
    private DateTime? startDate;
    private DateTime? endDate;
    private string? searchGenre;
    private MediaType? searchType;
    private bool clearFilterHidden = true;
    private void ResetFilter()
    {
        searchTitle = default;
        startDate = default;
        endDate = default;
        searchGenre = default;
        searchType = default;
        FilterMedia();
        clearFilterHidden = true;
    }
    private void GoToAddItemPage()
    {
        NavigationManager.NavigateTo("/profile/Add/");
    }
    protected override void OnInitialized()
    {
        // Filler Data
        @* mediaItems.AddRange(new List<MediaItem>
        {
            new MediaItem { SpecialId = "1",Title = "Home on the Range", Genre = "Family", Year = 2005, Type = MediaType.Movie},
            new MediaItem {SpecialId = "2", Title = "Tom Sawyer", Genre = "Adventure Fiction", Year = 1876, Type = MediaType.Book},
            new MediaItem { SpecialId = "3",Title = "Born in the USA", Genre = "Rock", Year = 1984, Type = MediaType.CD}
        }); *@
        filteredMediaItems = testAppData.mediaItems;
    }

    private void FilterMedia()
    {
        filteredMediaItems = testAppData.mediaItems
            .Where(item =>
                // Title
                (string.IsNullOrEmpty(searchTitle) || item.Title.Contains(searchTitle, StringComparison.OrdinalIgnoreCase)) &&
                // Start/End Date
                (!startDate.HasValue || new DateTime(item.Year, 1, 1) >= startDate.Value) &&
                (!endDate.HasValue || new DateTime(item.Year, 12, 31) <= endDate.Value) &&
                // Genre
                (string.IsNullOrEmpty(searchGenre) || item.Genre.Equals(searchGenre, StringComparison.OrdinalIgnoreCase)) &&
                // Media Type
                (!searchType.HasValue || item.Type == searchType.Value)
                )
            .ToList();
        clearFilterHidden = false;
    }
    private void TESTReplaceData(MouseEventArgs e)
    {
        testAppData.mediaItems.AddRange(new List<MediaItem>
        {
            new MediaItem { SpecialId = "1",Title = "Home on the Range", Genre = "Family", Year = 2005, Type = MediaType.Movie},
            new MediaItem {SpecialId = "2", Title = "Tom Sawyer", Genre = "Adventure Fiction", Year = 1876, Type = MediaType.Book},
            new MediaItem { SpecialId = "3",Title = "Born in the USA", Genre = "Rock", Year = 1984, Type = MediaType.CD}
        });
    }
}
